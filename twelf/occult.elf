% Conrete syntax for O'Cult

%% Natural numbers, consts are indexed by these
nat : type.
z : nat.
s : nat -> nat.

%% Terms, do we need them?
tm : type.
const : nat -> tm.
app : tm -> tm -> tm.

%% Patterns
pat : type.
pconst : nat -> pat.
papp : pat -> pat -> pat.
pvar : nat -> pat. %% Consider HOAS'ing this

rule : type.
rule_trans : pat -> pat -> rule.

%% Programs are rule lists.
program : type.
rule_list_nil : program.
rule_list_cons : rule -> program -> program.

%% Rules can be well-formed
wellformed : rule -> type.

ctx : type.
ctx_empty : ctx.
ctx_bind : nat -> tm -> ctx -> ctx.

%% Run union 
ctx_union : ctx -> ctx -> ctx -> type.

%% Unification of bindings
unify : ctx -> ctx -> type.

%% Matchings
match : ctx -> pat -> tm -> ctx -> type.
- : match CTX (pconst K) (const K) CTX.
- : match CTX (pvar K) TM (ctx_bind K TM CTX).
- : match CTX (papp A B) (app TA TB) CTXU
     <- match CTX A TA BindA
     <- match CTX B TB BindB
     <- unify BindA BindB
     <- ctx_union BindA CTX CTX'
     <- ctx_union BindB CTX' CTXU.

%query 1 1 (match ctx_empty (pconst K) (const K) ctx_empty).
test_term1 = (app (const Z) (const Y)).
%query 1 1 (match CTX (pvar K) test_term1 (ctx_bind K test_term1 CTX)).



%% Advise, which is really evaluation
advise : program -> tm -> tm -> type.

%% #########################################
%% ##### Translation from Occult to 2d #####
%% #########################################

transl_nat : nat -> exp -> type.
%mode transl_nat +K -E.
transl_nat_z : transl_nat z (inl unit).
transl_nat_s : transl_nat (s K) (inr K')
		<- transl_nat K K'.

transl_tm : tm -> exp -> type.
%mode transl_tm +T -E.
- : transl_tm (const K) (inr K')
     <- transl_nat K K'.
- : transl_tm (app T1 T2) (inl (pair T1' T2'))
     <- transl_tm T1 T1'
     <- transl_tm T2 T2'.

transl_pat : pat -> exp -> type.
%mode transl_pat +P -E.
- : transl_pat (pconst K) (inr (inl K'))
     <- transl_nat K K'.
- : transl_pat (pvar K) (inr (inr K'))
     <- transl_nat K K'.
- : transl_pat (papp P1 P2) (inl (pair P1' P2'))
     <- transl_pat P1 P1'
     <- transl_pat P2 P2'.

transl_rule : rule -> exp -> type.
%mode transl_rule +R -E.
- : transl_rule (rule_trans T1 T2) (pair T1' T2')
     <- transl_pat T1 T1'
     <- transl_pat T2 T2'.

