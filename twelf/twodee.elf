% Conrecte syntax

name : type. %name name N.

inface : type.
no : inface.
we : inface.

outface : type.
so : outface.
ea : outface.

exp : type.
unit : exp.
pair : exp -> exp -> exp.
inl : exp -> exp.
inr : exp -> exp.
if : inface -> exp.

output : type.
out_nil : output.
out_exp : exp -> output.

input : type.
inp_nil : input.
inp_exp : exp -> input.

cmd : type.
send_0 : cmd.
send_1 : exp -> outface -> cmd.
send_2 : exp -> outface -> exp -> outface -> cmd.
case : exp -> outface -> outface -> cmd.
split : exp -> cmd.
use : name -> cmd.

%% Wires are numbers for now
wire : type.
w_z : wire.
w_s : wire -> wire.

%% The store keeps track of what wires carries which values
store : type.
store_nil : store.
store_cons : wire -> exp -> store -> store.

store_lookup : store -> wire -> input -> type.
- : store_lookup store_nil _ inp_nil.
- : store_lookup (store_cons W E _) W (inp_exp E).
- : store_lookup (store_cons _ _ R) W E
     <- store_lookup R W E.

store_update : store -> wire -> output -> store -> type.
- : store_update S W out_nil S.
- : store_update store_nil W (out_exp E) (store_cons W E store_nil).
- : store_update (store_cons W _ R) W (out_exp E) (store_cons W E R).
- : store_update (store_cons K _ R) W OE S'
     <- store_update R W OE S'.

box : type.
box_cmd : cmd -> box.

box_list : type.
box_list_nil : box_list.
box_list_cons : box -> wire -> wire -> wire -> wire -> box_list -> box_list.

module : type.
module_nil : module.
module_cons : name -> box_list -> module -> module.

%% %% SEMANTICS BEGIN

%% A Map for inputs
i_map : inface -> input -> type.
%mode i_map +F -I.


%block i_map_blk : block {i' : input} {i : input}
		    {m : i_map no i} {m' : i_map we i'}.

%worlds (i_map_blk) (i_map I _).
%terminates E (i_map E _).

exp_eval : exp -> exp -> type.
%mode exp_eval +Exp -Exp'.
- : exp_eval (if we) I1
     <- i_map we (inp_exp I1).
- : exp_eval (if no) I1
     <- i_map no (inp_exp I1).
- : exp_eval unit unit.
- : exp_eval (pair P1 P2) (pair P1' P2')
     <- exp_eval P1 P1'
     <- exp_eval P2 P2'.
- : exp_eval (inl P) (inl P')
     <- exp_eval P P'.
- : exp_eval (inr P) (inr P')
     <- exp_eval P P'.
%worlds (i_map_blk) (exp_eval Exp _).
%terminates E (exp_eval E _).
%covers exp_eval +E -O.

cmd_eval : cmd -> output -> output -> type.
%mode cmd_eval +C -E' -S'.
- : cmd_eval send_0 out_nil out_nil.
- : cmd_eval (send_1 V ea) (out_exp V') out_nil
     <- exp_eval V V'.
- : cmd_eval (send_1 V so) out_nil (out_exp V')
     <- exp_eval V V'.
- : cmd_eval (send_2 V1 ea V2 so) (out_exp V1') (out_exp V2')
     <- exp_eval V1 V1'
     <- exp_eval V2 V2'.
- : cmd_eval (send_2 V1 so V2 ea) (out_exp V2') (out_exp V1')
     <- exp_eval V1 V1'
     <- exp_eval V2 V2'.
- : cmd_eval (split (pair V1 V2)) (out_exp V2') (out_exp V1')
     <- exp_eval V1 V1'
     <- exp_eval V2 V2'.
- : cmd_eval (case V1 ea _) (out_exp P) out_nil
     <- exp_eval V1 (inl P).
- : cmd_eval (case V1 so _) out_nil (out_exp P)
     <- exp_eval V1 (inl P).
- : cmd_eval (case V1 _ ea) (out_exp P) out_nil
     <- exp_eval V1 (inr P).
- : cmd_eval (case V1 _ so) out_nil (out_exp P)
     <- exp_eval V1 (inr P).
%% Todo: Use!

%worlds (i_map_blk) (cmd_eval Exp _ _).
%terminates E (cmd_eval E _ _).
%% No coverage yet. Misses Use.
% %covers exp_eval +E *I *I -O.

box_eval : box -> input -> input -> output -> output -> type.
%mode box_eval +B +W' +N' -E' -S'.
- : box_eval (box_cmd C) West North East South
     <- (i_map we West -> i_map no North -> cmd_eval C East South).

box_execute : store -> box -> wire -> wire -> wire -> wire -> store -> type.
- : box_execute ST B W N E S ST'
     <- store_lookup ST W (inp_exp IW)
     <- store_lookup ST N (inp_exp IN)
     <- box_eval B (inp_exp IW) (inp_exp IN) OE OS
     <- store_update ST E OE ST''
     <- store_update ST S OS ST'.
- : box_execute ST B w_z N E S ST'
     <- store_lookup ST N (inp_exp IN)
     <- box_eval B inp_nil (inp_exp IN) OE OS
     <- store_update ST E OE ST''
     <- store_update ST S OS ST'.
- : box_execute ST B W w_z E S ST'
     <- store_lookup ST W (inp_exp IW)
     <- box_eval B (inp_exp IW) inp_nil OE OS
     <- store_update ST E OE ST''
     <- store_update ST S OS ST'.
